// H√†m render m√£ gi·∫£m gi√°
function renderDiscountCodes(discounts) {
  const discountList = document.getElementById("discount-code-list");
  discountList.innerHTML = ""; // X√≥a n·ªôi dung tr∆∞·ªõc ƒë√≥

  if (!discounts || !discounts.$values || !Array.isArray(discounts.$values)) {
    console.error("Discounts data is not in the expected format:", discounts);
    discountList.innerHTML =
      "<p>Kh√¥ng th·ªÉ t·∫£i m√£ gi·∫£m gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.</p>";
    return;
  }

  const discountArray = discounts.$values;

  if (discountArray.length === 0) {
    discountList.innerHTML = "<p>Kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o hi·ªán t·∫°i.</p>";
    return;
  }

  discountArray.forEach((discount) => {
    const discountItem = document.createElement("div");
    discountItem.classList.add("discount-code__item");

    discountItem.innerHTML = `
        <span class="discount-code__code">${discount.code}</span>
        <span class="discount-code__amount">Gi·∫£m ${discount.discountAmount.toLocaleString()}ƒë</span>
        <span class="discount-code__date">H·∫øt h·∫°n: ${new Date(
          discount.endDate
        ).toLocaleDateString()}</span>
        <button class="discount-code__save-btn" data-discount-id="${
          discount.discountId
        }">L∆∞u m√£</button>
      `;

    discountList.appendChild(discountItem);

    const saveButton = discountItem.querySelector(".discount-code__save-btn");
    saveButton.addEventListener("click", async () => {
      await saveDiscount(discount.discountId);
    });
  });
}

// Bi·∫øn to√†n c·ª•c cho s√°ch flash sale
let allDiscountBooks = [];
let filteredDiscountBooks = [];
let currentPage = 1;
const booksPerPage = 16;
let currentSort = "newest"; // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo m·ªõi nh·∫•t

// H√†m render danh s√°ch s√°ch gi·∫£m gi√° v·ªõi ph√¢n trang
function renderDiscountBooks(books) {
  const bookList = document.getElementById("discount-book-list");
  bookList.innerHTML = ""; // X√≥a n·ªôi dung tr∆∞·ªõc ƒë√≥

  if (!books || !books.$values || !Array.isArray(books.$values)) {
    console.error("Books data is not in the expected format:", books);
    bookList.innerHTML =
      "<p>Kh√¥ng th·ªÉ t·∫£i s√°ch gi·∫£m gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.</p>";
    return;
  }

  allDiscountBooks = books.$values;
  applyFiltersAndSort(); // √Åp d·ª•ng s·∫Øp x·∫øp
}

// H√†m √°p d·ª•ng s·∫Øp x·∫øp
function applyFiltersAndSort() {
  filteredDiscountBooks = [...allDiscountBooks];

  // S·∫Øp x·∫øp s√°ch
  filteredDiscountBooks.sort((a, b) => {
    const dateA = new Date(a.createdAt || a.updatedAt || "1970-01-01T00:00:00");
    const dateB = new Date(b.createdAt || b.updatedAt || "1970-01-01T00:00:00");

    // Ki·ªÉm tra n·∫øu ng√†y kh√¥ng h·ª£p l·ªá
    if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) {
      console.error("Invalid date format:", {
        dateA: a.createdAt,
        dateB: b.createdAt,
      });
      return 0; // Kh√¥ng s·∫Øp x·∫øp n·∫øu ng√†y kh√¥ng h·ª£p l·ªá
    }

    return currentSort === "newest" ? dateB - dateA : dateA - dateB;
  });

  // Reset v·ªÅ trang 1 khi s·∫Øp x·∫øp
  currentPage = 1;

  // Render s√°ch v√† pagination
  renderDiscountBooksPage();
  renderDiscountBooksPagination();
}
// H√†m render s√°ch c·ªßa trang hi·ªán t·∫°i
function renderDiscountBooksPage() {
  const bookList = document.getElementById("discount-book-list");
  const start = (currentPage - 1) * booksPerPage;
  const end = start + booksPerPage;
  const booksToShow = filteredDiscountBooks.slice(start, end);

  bookList.innerHTML = booksToShow.length
    ? booksToShow
        .map(
          (book) => `
              <div class="book-item">
                <a href="../html/book-detail.html?id=${book.bookId}">
                  <img src="${book.coverImage}" alt="${book.title}" />
                  <span class="book-name">${book.title}</span>
                  <div class="Gia">
                    <span class="GiaHienTai">${book.discountPrice.toLocaleString()}ƒë</span>
                    <span class="discount">-${Math.round(
                      ((book.oldPrice - book.discountPrice) / book.oldPrice) *
                        100
                    )}%</span>
                  </div>
                  <span class="GiaCu">${book.oldPrice.toLocaleString()}ƒë</span>
                  <span class="DaBan">ƒê√£ b√°n: ${book.soldQuantity || 0}</span>
                </a>
              </div>
            `
        )
        .join("")
    : "<p>Kh√¥ng c√≥ s√°ch gi·∫£m gi√° n√†o hi·ªán t·∫°i.</p>";
}

// H√†m t·∫°o pagination cho s√°ch flash sale
function renderDiscountBooksPagination() {
  const pagination = document.getElementById("discount-book-pagination");
  if (!pagination) {
    console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ discount-book-pagination");
    return;
  }

  const totalPages = Math.ceil(filteredDiscountBooks.length / booksPerPage);
  pagination.innerHTML = "";

  if (totalPages <= 1) return; // ·∫®n pagination n·∫øu ch·ªâ c√≥ 1 trang

  // N√∫t Previous
  if (currentPage > 1) {
    pagination.innerHTML += `<button class="page-btn prev" data-page="${
      currentPage - 1
    }">¬´</button>`;
  }

  // C√°c n√∫t trang
  for (let i = 1; i <= totalPages; i++) {
    pagination.innerHTML += `<button class="page-btn ${
      i === currentPage ? "active" : ""
    }" data-page="${i}">${i}</button>`;
  }

  // N√∫t Next
  if (currentPage < totalPages) {
    pagination.innerHTML += `<button class="page-btn next" data-page="${
      currentPage + 1
    }">¬ª</button>`;
  }

  // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
  document.querySelectorAll(".page-btn").forEach((btn) => {
    btn.addEventListener("click", function () {
      currentPage = parseInt(this.dataset.page);
      renderDiscountBooksPage();
      renderDiscountBooksPagination();
    });
  });
}

// H√†m ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
function isLoggedIn() {
  const user = localStorage.getItem("user");
  return user !== null;
}

// H√†m l·∫•y userId t·ª´ localStorage
function getUserId() {
  const user = localStorage.getItem("user");
  if (user) {
    const userData = JSON.parse(user);
    return userData.userId;
  }
  return null;
}

// H√†m l∆∞u m√£ gi·∫£m gi√°
async function saveDiscount(discountId) {
  try {
    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    if (!isLoggedIn()) {
      Swal.fire({
        icon: "warning",
        title: "C·∫£nh b√°o",
        text: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u m√£ gi·∫£m gi√°!",
      });
      window.location.href = "login.html"; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      return;
    }

    // L·∫•y userId t·ª´ localStorage
    const userId = getUserId();
    if (!userId) {
      Swal.fire({
        icon: "error",
        title: "L·ªói",
        text: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
      });
      localStorage.removeItem("user");
      window.location.href = "login.html";
      return;
    }

    const response = await fetch("http://localhost:5000/api/Discounts/save", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId: userId,
        discountId: discountId,
      }),
    });

    const result = await response.json();

    if (response.ok) {
      Swal.fire({
        icon: "success",
        title: "Th√†nh c√¥ng",
        text: result.message,
      });
    } else {
      Swal.fire({
        icon: "error",
        title: "L·ªói",
        text: result.message,
      });
    }
  } catch (error) {
    console.error("Error saving discount:", error);
    Swal.fire({
      icon: "error",
      title: "L·ªói",
      text: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
}

// X·ª≠ l√Ω √¥ t√¨m ki·∫øm
function handleSearch() {
  const searchInput = document.getElementById("search-input");
  if (!searchInput) {
    console.error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm v·ªõi id 'search-input'");
    Swal.fire({
      icon: "error",
      title: "L·ªói",
      text: "Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm. Vui l√≤ng ki·ªÉm tra l·∫°i.",
    });
    return;
  }

  searchInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      const keyword = searchInput.value.trim();
      if (keyword) {
        window.location.href = `../html/book-list.html?search=${encodeURIComponent(
          keyword
        )}`;
      }
    }
  });
}

// H√†m g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu
async function fetchData() {
  try {
    const discountResponse = await fetch("http://localhost:5000/api/Discounts");
    if (!discountResponse.ok) {
      throw new Error(`HTTP error! Status: ${discountResponse.status}`);
    }
    const discounts = await discountResponse.json();
    console.log("Discounts API response:", discounts);
    renderDiscountCodes(discounts);

    const booksResponse = await fetch(
      "http://localhost:5000/api/Books/discount"
    );
    if (!booksResponse.ok) {
      throw new Error(`HTTP error! Status: ${booksResponse.status}`);
    }
    const books = await booksResponse.json();
    console.log("Books API response:", books);
    renderDiscountBooks(books);

    // L·∫•y danh m·ª•c cho header
    await fetchCategories();
  } catch (error) {
    console.error("Error fetching data:", error);
    Swal.fire({
      icon: "error",
      title: "L·ªói",
      text: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
}

// H√†m l·∫•y danh m·ª•c t·ª´ API
async function fetchCategories() {
  try {
    const response = await fetch("http://localhost:5000/api/categories");
    if (!response.ok) throw new Error(`L·ªói API: ${response.status}`);

    const data = await response.json();
    console.log("üìå Categories t·ª´ API:", data); // Ki·ªÉm tra d·ªØ li·ªáu

    const categories = data.$values || []; // L·∫•y danh m·ª•c ch√≠nh
    renderCategories(categories, "category-list"); // Render v√†o header
  } catch (error) {
    console.error("‚ùå L·ªói t·∫£i danh m·ª•c:", error);
    Swal.fire({
      icon: "error",
      title: "L·ªói",
      text: "Kh√¥ng th·ªÉ t·∫£i danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
}

// H√†m render danh m·ª•c v√†o header
function renderCategories(categories, elementId) {
  const categoryContainer = document.getElementById(elementId);
  if (!categoryContainer) {
    console.error(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ${elementId} trong HTML`);
    Swal.fire({
      icon: "error",
      title: "L·ªói",
      text: `Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ${elementId}. Vui l√≤ng ki·ªÉm tra l·∫°i.`,
    });
    return;
  }

  categoryContainer.innerHTML = categories
    .map((category) => {
      const subCategories = category.subCategories?.$values || []; // L·∫•y danh m·ª•c con

      return `
          <div class="nav__dropdown-item">
            <a href="../html/book-list.html?categoryId=${category.categoryId}">
              ${category.categoryName}
            </a>
            ${
              subCategories.length > 0
                ? `<div class="nav__dropdown-subcontent">
                    ${subCategories
                      .map(
                        (sub) => `
                          <div class="nav__dropdown-subitem">
                            <a href="../html/book-list.html?categoryId=${sub.categoryId}">
                              ${sub.categoryName}
                            </a>
                          </div>
                      `
                      )
                      .join("")}
                  </div>`
                : ""
            }
          </div>
        `;
    })
    .join("");
}

// Th√™m s·ª± ki·ªán s·∫Øp x·∫øp
document
  .getElementById("sort-discount-books")
  ?.addEventListener("change", function () {
    currentSort = this.value;
    applyFiltersAndSort();
  });

// H√†m render ph·∫ßn login d·ª±a tr√™n tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
function renderLoginSection() {
  const loginSection = document.getElementById("login-section");
  const user = JSON.parse(localStorage.getItem("user")); // L·∫•y th√¥ng tin user t·ª´ localStorage

  if (!loginSection) {
    console.error("Kh√¥ng t√¨m th·∫•y login-section trong HTML");
    Swal.fire({
      icon: "error",
      title: "L·ªói",
      text: "Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng ki·ªÉm tra l·∫°i.",
    });
    return;
  }

  if (!user) {
    // Ch∆∞a ƒëƒÉng nh·∫≠p
    loginSection.innerHTML = `
      <button class="login__dropdown-btn">
        <img src="../img/Login.svg" alt="ƒêƒÉng nh·∫≠p" />
      </button>
      <div class="login__dropdown-content">
        <a href="./Login.html">ƒêƒÉng Nh·∫≠p</a>
      </div>
    `;
  } else {
    // ƒê√£ ƒëƒÉng nh·∫≠p
    const menuItems =
      user.role === "Admin"
        ? `
          <a href="../html/admin.html">Qu·∫£n l√Ω</a>
          <a href="#" id="logout-btn">ƒêƒÉng xu·∫•t</a>
        `
        : `
          <a href="../html/user.html">Th√¥ng tin c√° nh√¢n</a>
          <a href="#" id="logout-btn">ƒêƒÉng xu·∫•t</a>
        `;

    loginSection.innerHTML = `
      <div class="login__user">
        <img src="../img/login.svg" alt="Avatar" />
        <span>${user.fullName}</span>
      </div>
      <div class="login__dropdown-content">
        ${menuItems}
      </div>
    `;

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
    document.getElementById("logout-btn")?.addEventListener("click", (e) => {
      e.preventDefault();
      localStorage.removeItem("user"); // X√≥a th√¥ng tin user
      window.location.reload(); // T·∫£i l·∫°i trang
    });
  }
}

// Kh·ªüi ch·∫°y khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", () => {
  fetchData();
  handleSearch();
  renderLoginSection(); // Th√™m ch·ª©c nƒÉng render login
});
